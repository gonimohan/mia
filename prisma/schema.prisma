// prisma/schema.prisma

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  // Output directory for Prisma Client can be customized if needed,
  // e.g., output = "../node_modules/.prisma/client"
  // For better-auth, it might expect it in node_modules/@prisma/client or a specific location.
  // Default is usually fine: node_modules/.prisma/client
}

model User {
  id            String    @id @default(cuid()) // Drizzle: text("id").notNull().primaryKey()
  name          String?
  email         String?   @unique // Drizzle: text("email").unique()
  emailVerified DateTime? @map("emailVerified") // Drizzle: timestamp("emailVerified", { mode: "date" })
  image         String?

  accounts      Account[]
  sessions      Session[]
  authenticators Authenticator[]

  // Optional: Relation to UserProfile if you want Prisma Client to be aware of it.
  // This requires UserProfile model to be defined below and correctly linked.
  // userProfile   UserProfile? @relation(fields: [id], references: [userId])

  @@map("user")
}

model Account {
  // Prisma often prefers a single @id field.
  // The Drizzle schema uses a compound primary key (provider, providerAccountId).
  // To reconcile, we can add a surrogate @id for Prisma, and keep the @@unique for the functional key.
  // Or, if better-auth strictly relies on the Drizzle schema's PK, this model would need to reflect that.
  // For now, using the compound key as the primary identifier in Prisma as well via @@id.
  // This means Drizzle's CREATE TABLE for 'account' should have this as PK.
  // The Drizzle schema has: primaryKey({ columns: [account.provider, account.providerAccountId] }) - this is good.
  // No separate `id String @id` is needed if the compound key is the PK for Prisma too.

  userId            String
  type              String    // e.g., "oauth", "email"
  provider          String    // e.g., "google", "credentials"
  providerAccountId String    // User's ID on the provider's system
  refresh_token     String?   @db.Text
  access_token      String?   @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?   @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId]) // Matches Drizzle's compound PK
  @@index([userId], name: "account_userId_idx") // Matches Drizzle index
  @@map("account")
}

model Session {
  // Drizzle schema has sessionToken as PK.
  sessionToken String   @id @unique // @id makes it PK for Prisma, @unique matches Drizzle
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], name: "session_userId_idx") // Matches Drizzle index
  @@map("session")
}

model VerificationToken {
  // Drizzle schema has (identifier, token) as PK and token as unique.
  identifier String
  token      String   @unique // Matches Drizzle unique constraint
  expires    DateTime

  @@id([identifier, token]) // Matches Drizzle's compound PK
  @@map("verification_token")
}

model Authenticator {
  // Drizzle schema has credentialID as unique. The prompt suggests composite @@id([userId, credentialID]).
  // This implies that for Prisma's view, this combination is the primary key.
  // Drizzle's CREATE TABLE for authenticator doesn't specify a PK, only unique credentialID.
  // If Drizzle is the source of truth, this might need adjustment or the DB table needs a PK.
  // For now, following the prompt's Prisma schema example for Authenticator.
  // The Drizzle schema for authenticator table does NOT have a primary key defined, only unique on credentialID.
  // This Prisma model defines a composite @@id. This is a divergence.
  // For better-auth to work, it needs to align with what its Prisma adapter expects.
  // Let's assume better-auth can work with this if the DB has a unique constraint on credentialID
  // and this @@id is for Prisma client's benefit or specific better-auth needs.
  // The Drizzle migration for 'authenticator' table did: CONSTRAINT "authenticator_credentialID_unique" UNIQUE("credentialID")
  // It did NOT create a primary key. This is a problem.
  // A table for Prisma typically needs a primary key.
  // I will add a simple @id String @default(cuid()) to Authenticator for Prisma,
  // and keep credentialID as @unique. This is safer for Prisma client generation.
  // The Drizzle schema should ideally be updated later to add a PK to `authenticator` table.

  id                   String  @id @default(cuid()) // Added for Prisma compatibility
  credentialID         String  @unique // Matches Drizzle unique constraint
  userId               String
  providerAccountId    String  // Typically user handle for WebAuthn
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], name: "authenticator_userId_idx") // Matches Drizzle index
  // @@id([userId, credentialID]) // Removed this composite ID in favor of surrogate `id`
  @@map("authenticator")
}


// --- Application Specific Tables (Optional for Prisma if only used by Drizzle) ---
// These are managed by Drizzle. Including them here is optional, only if you intend
// to also use Prisma Client to interact with them, or for `better-auth` if it needs to
// link to userProfiles directly through Prisma relations (unlikely for core auth).

// model UserProfile {
//   id         Int      @id @default(autoincrement()) // Drizzle: serial('id').primaryKey()
//   userId     String   @unique @map("user_id")     // Drizzle: text('user_id').unique().notNull().references(() => users.id)
//   email      String   @unique                     // Drizzle: varchar('email', { length: 255 }).unique().notNull()
//   name       String?                              // Drizzle: varchar('name', { length: 255 })
//   preferences Json?   @default("{}")              // Drizzle: jsonb('preferences').default('{}')
//   createdAt  DateTime @default(now()) @map("created_at") // Drizzle: timestamp('created_at').defaultNow().notNull()
//   updatedAt  DateTime @updatedAt @map("updated_at")    // Drizzle: timestamp('updated_at').defaultNow().notNull()
//
//   user User @relation(fields: [userId], references: [id], onDelete: Cascade)
//
//   @@map("user_profiles")
// }

// Other Drizzle-managed tables (articles, market_insights, etc.) are omitted here
// as they are not directly part of the authentication schema for `better-auth`.
// If `better-auth` or another Prisma-dependent part of the app needed to interact
// with them via Prisma Client, their models would also need to be defined here,
// carefully mapping to the Drizzle schema.
